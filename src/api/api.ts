/* tslint:disable */
/* eslint-disable */
/**
 * Khana Kahani API
 * Recipe Management System API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface RecipeCreate
 */
export interface RecipeCreate {
    /**
     * 
     * @type {string}
     * @memberof RecipeCreate
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof RecipeCreate
     */
    'cuisine': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecipeCreate
     */
    'ingredients': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RecipeCreate
     */
    'tags'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RecipeCreate
     */
    'steps': string;
}
/**
 * 
 * @export
 * @interface RecipeNoteCreate
 */
export interface RecipeNoteCreate {
    /**
     * 
     * @type {string}
     * @memberof RecipeNoteCreate
     */
    'text': string;
}
/**
 * 
 * @export
 * @interface RecipeNoteOut
 */
export interface RecipeNoteOut {
    /**
     * 
     * @type {number}
     * @memberof RecipeNoteOut
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof RecipeNoteOut
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof RecipeNoteOut
     */
    'created_at': string;
    /**
     * 
     * @type {number}
     * @memberof RecipeNoteOut
     */
    'user_id': number;
}
/**
 * 
 * @export
 * @interface RecipeOut
 */
export interface RecipeOut {
    /**
     * 
     * @type {string}
     * @memberof RecipeOut
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof RecipeOut
     */
    'cuisine': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecipeOut
     */
    'ingredients': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RecipeOut
     */
    'tags'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RecipeOut
     */
    'steps': string;
    /**
     * 
     * @type {number}
     * @memberof RecipeOut
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof RecipeOut
     */
    'owner_id': number;
}
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'token_type': string;
}
/**
 * 
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserOut
 */
export interface UserOut {
    /**
     * 
     * @type {string}
     * @memberof UserOut
     */
    'email': string;
    /**
     * 
     * @type {number}
     * @memberof UserOut
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAuthLoginPost: async (username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('loginAuthLoginPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginAuthLoginPost', 'password', password)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * JWT logout is typically handled client-side by discarding the token. Implement a token blacklist here if you need server-side invalidation.
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutAuthLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAuthRegisterPost: async (userCreate: UserCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('registerAuthRegisterPost', 'userCreate', userCreate)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginAuthLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginAuthLoginPost(username, password, grantType, scope, clientId, clientSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.loginAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * JWT logout is typically handled client-side by discarding the token. Implement a token blacklist here if you need server-side invalidation.
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutAuthLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutAuthLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.logoutAuthLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerAuthRegisterPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerAuthRegisterPost(userCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.registerAuthRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAuthLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.loginAuthLoginPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * JWT logout is typically handled client-side by discarding the token. Implement a token blacklist here if you need server-side invalidation.
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutAuthLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.logoutAuthLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAuthRegisterPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): AxiosPromise<UserOut> {
            return localVarFp.registerAuthRegisterPost(userCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @summary Login
     * @param {string} username 
     * @param {string} password 
     * @param {string | null} [grantType] 
     * @param {string} [scope] 
     * @param {string | null} [clientId] 
     * @param {string | null} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public loginAuthLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).loginAuthLoginPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * JWT logout is typically handled client-side by discarding the token. Implement a token blacklist here if you need server-side invalidation.
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public logoutAuthLogoutPost(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).logoutAuthLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register
     * @param {UserCreate} userCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public registerAuthRegisterPost(userCreate: UserCreate, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).registerAuthRegisterPost(userCreate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Read Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsersUsersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Read Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readUsersUsersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readUsersUsersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readUsersUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Read Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsersUsersGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.readUsersUsersGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Read Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readUsersUsersGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readUsersUsersGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RecipesApi - axios parameter creator
 * @export
 */
export const RecipesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add Recipe Note
         * @param {number} recipeId 
         * @param {RecipeNoteCreate} recipeNoteCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRecipeNoteRecipesRecipeIdNotesPost: async (recipeId: number, recipeNoteCreate: RecipeNoteCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('addRecipeNoteRecipesRecipeIdNotesPost', 'recipeId', recipeId)
            // verify required parameter 'recipeNoteCreate' is not null or undefined
            assertParamExists('addRecipeNoteRecipesRecipeIdNotesPost', 'recipeNoteCreate', recipeNoteCreate)
            const localVarPath = `/recipes/{recipe_id}/notes`
                .replace(`{${"recipe_id"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recipeNoteCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create New Recipe
         * @param {RecipeCreate} recipeCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewRecipeRecipesPost: async (recipeCreate: RecipeCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeCreate' is not null or undefined
            assertParamExists('createNewRecipeRecipesPost', 'recipeCreate', recipeCreate)
            const localVarPath = `/recipes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recipeCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Recipe Notes
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRecipeNotesRecipesRecipeIdNotesGet: async (recipeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('listRecipeNotesRecipesRecipeIdNotesGet', 'recipeId', recipeId)
            const localVarPath = `/recipes/{recipe_id}/notes`
                .replace(`{${"recipe_id"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Recipes
         * @param {string | null} [cuisine] 
         * @param {string | null} [ingredients] 
         * @param {string | null} [tags] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRecipesRecipesGet: async (cuisine?: string | null, ingredients?: string | null, tags?: string | null, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recipes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (cuisine !== undefined) {
                localVarQueryParameter['cuisine'] = cuisine;
            }

            if (ingredients !== undefined) {
                localVarQueryParameter['ingredients'] = ingredients;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mark Favorite
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markFavoriteRecipesRecipeIdFavoritePost: async (recipeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('markFavoriteRecipesRecipeIdFavoritePost', 'recipeId', recipeId)
            const localVarPath = `/recipes/{recipe_id}/favorite`
                .replace(`{${"recipe_id"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Partial Update Recipe
         * @param {number} recipeId 
         * @param {{ [key: string]: any; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateRecipeRecipesRecipeIdPatch: async (recipeId: number, requestBody: { [key: string]: any; }, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('partialUpdateRecipeRecipesRecipeIdPatch', 'recipeId', recipeId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('partialUpdateRecipeRecipesRecipeIdPatch', 'requestBody', requestBody)
            const localVarPath = `/recipes/{recipe_id}`
                .replace(`{${"recipe_id"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Recipe
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRecipeRecipesRecipeIdGet: async (recipeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('readRecipeRecipesRecipeIdGet', 'recipeId', recipeId)
            const localVarPath = `/recipes/{recipe_id}`
                .replace(`{${"recipe_id"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Favorite
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFavoriteRecipesRecipeIdFavoriteDelete: async (recipeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('removeFavoriteRecipesRecipeIdFavoriteDelete', 'recipeId', recipeId)
            const localVarPath = `/recipes/{recipe_id}/favorite`
                .replace(`{${"recipe_id"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Recipe
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRecipeRecipesRecipeIdDelete: async (recipeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('removeRecipeRecipesRecipeIdDelete', 'recipeId', recipeId)
            const localVarPath = `/recipes/{recipe_id}`
                .replace(`{${"recipe_id"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Replace Recipe
         * @param {number} recipeId 
         * @param {RecipeCreate} recipeCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceRecipeRecipesRecipeIdPut: async (recipeId: number, recipeCreate: RecipeCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('replaceRecipeRecipesRecipeIdPut', 'recipeId', recipeId)
            // verify required parameter 'recipeCreate' is not null or undefined
            assertParamExists('replaceRecipeRecipesRecipeIdPut', 'recipeCreate', recipeCreate)
            const localVarPath = `/recipes/{recipe_id}`
                .replace(`{${"recipe_id"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recipeCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecipesApi - functional programming interface
 * @export
 */
export const RecipesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecipesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add Recipe Note
         * @param {number} recipeId 
         * @param {RecipeNoteCreate} recipeNoteCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRecipeNoteRecipesRecipeIdNotesPost(recipeId: number, recipeNoteCreate: RecipeNoteCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipeNoteOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRecipeNoteRecipesRecipeIdNotesPost(recipeId, recipeNoteCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipesApi.addRecipeNoteRecipesRecipeIdNotesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create New Recipe
         * @param {RecipeCreate} recipeCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewRecipeRecipesPost(recipeCreate: RecipeCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipeOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewRecipeRecipesPost(recipeCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipesApi.createNewRecipeRecipesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Recipe Notes
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRecipeNotesRecipesRecipeIdNotesGet(recipeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecipeNoteOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRecipeNotesRecipesRecipeIdNotesGet(recipeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipesApi.listRecipeNotesRecipesRecipeIdNotesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Recipes
         * @param {string | null} [cuisine] 
         * @param {string | null} [ingredients] 
         * @param {string | null} [tags] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRecipesRecipesGet(cuisine?: string | null, ingredients?: string | null, tags?: string | null, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecipeOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRecipesRecipesGet(cuisine, ingredients, tags, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipesApi.listRecipesRecipesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Mark Favorite
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markFavoriteRecipesRecipeIdFavoritePost(recipeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markFavoriteRecipesRecipeIdFavoritePost(recipeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipesApi.markFavoriteRecipesRecipeIdFavoritePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Partial Update Recipe
         * @param {number} recipeId 
         * @param {{ [key: string]: any; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateRecipeRecipesRecipeIdPatch(recipeId: number, requestBody: { [key: string]: any; }, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipeOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateRecipeRecipesRecipeIdPatch(recipeId, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipesApi.partialUpdateRecipeRecipesRecipeIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Recipe
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readRecipeRecipesRecipeIdGet(recipeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipeOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readRecipeRecipesRecipeIdGet(recipeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipesApi.readRecipeRecipesRecipeIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove Favorite
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFavoriteRecipesRecipeIdFavoriteDelete(recipeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFavoriteRecipesRecipeIdFavoriteDelete(recipeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipesApi.removeFavoriteRecipesRecipeIdFavoriteDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove Recipe
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeRecipeRecipesRecipeIdDelete(recipeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeRecipeRecipesRecipeIdDelete(recipeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipesApi.removeRecipeRecipesRecipeIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Replace Recipe
         * @param {number} recipeId 
         * @param {RecipeCreate} recipeCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceRecipeRecipesRecipeIdPut(recipeId: number, recipeCreate: RecipeCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipeOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceRecipeRecipesRecipeIdPut(recipeId, recipeCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipesApi.replaceRecipeRecipesRecipeIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RecipesApi - factory interface
 * @export
 */
export const RecipesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecipesApiFp(configuration)
    return {
        /**
         * 
         * @summary Add Recipe Note
         * @param {number} recipeId 
         * @param {RecipeNoteCreate} recipeNoteCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRecipeNoteRecipesRecipeIdNotesPost(recipeId: number, recipeNoteCreate: RecipeNoteCreate, options?: RawAxiosRequestConfig): AxiosPromise<RecipeNoteOut> {
            return localVarFp.addRecipeNoteRecipesRecipeIdNotesPost(recipeId, recipeNoteCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create New Recipe
         * @param {RecipeCreate} recipeCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewRecipeRecipesPost(recipeCreate: RecipeCreate, options?: RawAxiosRequestConfig): AxiosPromise<RecipeOut> {
            return localVarFp.createNewRecipeRecipesPost(recipeCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Recipe Notes
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRecipeNotesRecipesRecipeIdNotesGet(recipeId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<RecipeNoteOut>> {
            return localVarFp.listRecipeNotesRecipesRecipeIdNotesGet(recipeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Recipes
         * @param {string | null} [cuisine] 
         * @param {string | null} [ingredients] 
         * @param {string | null} [tags] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRecipesRecipesGet(cuisine?: string | null, ingredients?: string | null, tags?: string | null, page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<RecipeOut>> {
            return localVarFp.listRecipesRecipesGet(cuisine, ingredients, tags, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mark Favorite
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markFavoriteRecipesRecipeIdFavoritePost(recipeId: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.markFavoriteRecipesRecipeIdFavoritePost(recipeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Partial Update Recipe
         * @param {number} recipeId 
         * @param {{ [key: string]: any; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateRecipeRecipesRecipeIdPatch(recipeId: number, requestBody: { [key: string]: any; }, options?: RawAxiosRequestConfig): AxiosPromise<RecipeOut> {
            return localVarFp.partialUpdateRecipeRecipesRecipeIdPatch(recipeId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Recipe
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRecipeRecipesRecipeIdGet(recipeId: number, options?: RawAxiosRequestConfig): AxiosPromise<RecipeOut> {
            return localVarFp.readRecipeRecipesRecipeIdGet(recipeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove Favorite
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFavoriteRecipesRecipeIdFavoriteDelete(recipeId: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.removeFavoriteRecipesRecipeIdFavoriteDelete(recipeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove Recipe
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRecipeRecipesRecipeIdDelete(recipeId: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.removeRecipeRecipesRecipeIdDelete(recipeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Replace Recipe
         * @param {number} recipeId 
         * @param {RecipeCreate} recipeCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceRecipeRecipesRecipeIdPut(recipeId: number, recipeCreate: RecipeCreate, options?: RawAxiosRequestConfig): AxiosPromise<RecipeOut> {
            return localVarFp.replaceRecipeRecipesRecipeIdPut(recipeId, recipeCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecipesApi - object-oriented interface
 * @export
 * @class RecipesApi
 * @extends {BaseAPI}
 */
export class RecipesApi extends BaseAPI {
    /**
     * 
     * @summary Add Recipe Note
     * @param {number} recipeId 
     * @param {RecipeNoteCreate} recipeNoteCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public addRecipeNoteRecipesRecipeIdNotesPost(recipeId: number, recipeNoteCreate: RecipeNoteCreate, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).addRecipeNoteRecipesRecipeIdNotesPost(recipeId, recipeNoteCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create New Recipe
     * @param {RecipeCreate} recipeCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public createNewRecipeRecipesPost(recipeCreate: RecipeCreate, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).createNewRecipeRecipesPost(recipeCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Recipe Notes
     * @param {number} recipeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public listRecipeNotesRecipesRecipeIdNotesGet(recipeId: number, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).listRecipeNotesRecipesRecipeIdNotesGet(recipeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Recipes
     * @param {string | null} [cuisine] 
     * @param {string | null} [ingredients] 
     * @param {string | null} [tags] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public listRecipesRecipesGet(cuisine?: string | null, ingredients?: string | null, tags?: string | null, page?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).listRecipesRecipesGet(cuisine, ingredients, tags, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mark Favorite
     * @param {number} recipeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public markFavoriteRecipesRecipeIdFavoritePost(recipeId: number, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).markFavoriteRecipesRecipeIdFavoritePost(recipeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Partial Update Recipe
     * @param {number} recipeId 
     * @param {{ [key: string]: any; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public partialUpdateRecipeRecipesRecipeIdPatch(recipeId: number, requestBody: { [key: string]: any; }, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).partialUpdateRecipeRecipesRecipeIdPatch(recipeId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Recipe
     * @param {number} recipeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public readRecipeRecipesRecipeIdGet(recipeId: number, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).readRecipeRecipesRecipeIdGet(recipeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove Favorite
     * @param {number} recipeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public removeFavoriteRecipesRecipeIdFavoriteDelete(recipeId: number, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).removeFavoriteRecipesRecipeIdFavoriteDelete(recipeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove Recipe
     * @param {number} recipeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public removeRecipeRecipesRecipeIdDelete(recipeId: number, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).removeRecipeRecipesRecipeIdDelete(recipeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Replace Recipe
     * @param {number} recipeId 
     * @param {RecipeCreate} recipeCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public replaceRecipeRecipesRecipeIdPut(recipeId: number, recipeCreate: RecipeCreate, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).replaceRecipeRecipesRecipeIdPut(recipeId, recipeCreate, options).then((request) => request(this.axios, this.basePath));
    }
}



